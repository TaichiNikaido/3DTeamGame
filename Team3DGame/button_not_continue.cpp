//=============================================================================
//
// コンティニューしないボタン [button_not_continue.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include <stdio.h>
#include <stdlib.h>
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "sound.h"
#include "button_not_continue.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CNotContinueButton::CNotContinueButton()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CNotContinueButton::~CNotContinueButton()
{
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CNotContinueButton * CNotContinueButton::Create(D3DXVECTOR3 Position)
{
	//コンティニューしないボタンのポインタ
	CNotContinueButton * pNotContinueButton = NULL;
	//コンティニューしないボタンのポインタがNULLの場合
	if (pNotContinueButton == NULL)
	{
		//コンティニューしないボタンのメモリ確保
		pNotContinueButton = new CNotContinueButton;
		//コンティニューしないボタンのポインタがNULLではない場合
		if (pNotContinueButton != NULL)
		{
			//コンティニューしないボタンの位置設定
			pNotContinueButton->SetPosition(Position);
			//コンティニューしないボタンの初期化処理関数呼び出し
			pNotContinueButton->Init();
		}
	}
	//コンティニューしないボタンのポインタを返す
	return pNotContinueButton;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CNotContinueButton::Init(void)
{
	//ボタンの初期化処理関数呼び出し
	CButton::Init();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CNotContinueButton::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CButton::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CNotContinueButton::Update(void)
{
	//ボタンの更新処理関数呼び出し
	CButton::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CNotContinueButton::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CButton::Draw();
}

//=============================================================================
// プレス処理関数
//=============================================================================
void CNotContinueButton::Press(void)
{
	//サウンドの取得
	CSound * pSound = CManager::GetSound();
	//もしサウンドのポインタがNULLじゃない場合
	if (pSound != NULL)
	{
		//決定音の再生
		pSound->PlaySoundA(CSound::SOUND_LABEL_SE_BUTTON_PUSH);
	}
	//タイトルに移動
	CManager::StartFade(CManager::MODE_TITLE);
}
