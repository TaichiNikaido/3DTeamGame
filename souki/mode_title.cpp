//=============================================================================
//
// タイトルモード [mode_title.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "sound.h"
#include "keyboard.h"
#include "joystick.h"
#include "mode_title.h"
#include "title_logo.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
CTitlelogo *CTitleMode::m_pTitlelogo = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CTitleMode::CTitleMode()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CTitleMode::~CTitleMode()
{
}

//=============================================================================
// 生成処理関数
//=============================================================================
CTitleMode * CTitleMode::Create()
{
	//タイトルモードのポインタ
	CTitleMode * pTitleMode = NULL;
	//もしタイトルモードのポインタがNULLの場合
	if (pTitleMode == NULL)
	{
		//タイトルモードのメモリ確保
		pTitleMode = new CTitleMode;
		//もしタイトルモードのポインタがNULLじゃない場合
		if (pTitleMode != NULL)
		{
			//初期化処理関数呼び出し
			pTitleMode->Init();
		}
	}
	//タイトルモードのポインタを返す	
	return pTitleMode;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CTitleMode::Init(void)
{
	//初期全生成処理関数呼び出し
	InitCreateAll();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CTitleMode::Uninit(void)
{
	// もしロゴのポインタがＮＵＬＬじゃない場合
	if (m_pTitlelogo != NULL)
	{
		// ロゴのポインタをＮＵＬＬにする
		m_pTitlelogo = NULL;
	}
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CTitleMode::Update(void)
{
	//キーボードの取得
	CKeyboard *pKeyboard = CManager::GetKeyboard();
	//サウンドの取得
	CSound * pSound = CManager::GetSound();
	//ジョイスティックの取得
	CJoystick * pJoystick = CManager::GetJoystick();
	LPDIRECTINPUTDEVICE8 lpDIDevice = CJoystick::GetDevice();
	DIJOYSTATE js;
	//ジョイスティックの振動取得
	LPDIRECTINPUTEFFECT pDIEffect = CJoystick::GetEffect();
	if (lpDIDevice != NULL)
	{
		lpDIDevice->Poll();
		lpDIDevice->GetDeviceState(sizeof(DIJOYSTATE), &js);
	}
	//もしENTERかAボタンを押したとき
	if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || lpDIDevice != NULL &&pJoystick->GetJoystickTrigger(JS_A))
	{
		//サウンドの停止
		pSound->StopSound();
		//ランキングに移動
		CManager::StartFade(CManager::MODE_GAME);
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CTitleMode::Draw(void)
{
}

//=============================================================================
// 初期全生成処理関数
//=============================================================================
void CTitleMode::InitCreateAll(void)
{
	// タイトルロゴがNULLなら
	if (m_pTitlelogo == NULL)
	{
		// プレスエンター生成
		m_pTitlelogo = CTitlelogo::Create(D3DXVECTOR3(TITLE_PLESS_POS_X, TITLE_PLESS_POS_Y, 0.0f),
			D3DXVECTOR3(TITLE_PLESS_SIZE_X, TITLE_PLESS_SIZE_Y, 0.0f),
			CTitlelogo::LOGOTIPE_PRESS);
	}

}
