//=============================================================================
//
// コンティニュー画面 [continue.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "sound.h"
#include "keyboard.h"
#include "joystick.h"
#include "continue.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CContinue::CContinue()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CContinue::~CContinue()
{
}

//=============================================================================
// 生成処理関数
//=============================================================================
CContinue * CContinue::Create()
{
	//コンティニュー画面のポインタ
	CContinue * pContinue = NULL;
	//もしコンティニュー画面がNULLの場合
	if (pContinue == NULL)
	{
		//コンティニュー画面のメモリ確保
		pContinue = new CContinue;
		//もしコンティニュー画面がNULLじゃない場合
		if (pContinue != NULL)
		{
			//初期化処理関数呼び出し
			pContinue->Init();
		}
	}
	//コンティニュー画面のポインタ
	return pContinue;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CContinue::Init(void)
{
	//全生成処理関数呼び出し
	CreateAll();
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CContinue::Uninit(void)
{
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CContinue::Update(void)
{
	//キーボードの取得
	CKeyboard *pKeyboard = CManager::GetKeyboard();
	//サウンドの取得
	CSound * pSound = CManager::GetSound();
	//ジョイスティックの取得
	CJoystick * pJoystick = CManager::GetJoystick();
	LPDIRECTINPUTDEVICE8 lpDIDevice = CJoystick::GetDevice();
	DIJOYSTATE js;
	//ジョイスティックの振動取得
	LPDIRECTINPUTEFFECT pDIEffect = CJoystick::GetEffect();
	if (lpDIDevice != NULL)
	{
		lpDIDevice->Poll();
		lpDIDevice->GetDeviceState(sizeof(DIJOYSTATE), &js);
	}
	//もしENTERかAボタンを押したとき
	if (pKeyboard->GetKeyboardTrigger(DIK_RETURN) || lpDIDevice != NULL &&pJoystick->GetJoystickTrigger(JS_A))
	{
		//サウンドの停止
		pSound->StopSound();
		//ランキングに移動
		CManager::StartFade(CManager::MODE_TITLE);
	}
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CContinue::Draw(void)
{
}

//=============================================================================
// 全生成処理関数
//=============================================================================
void CContinue::CreateAll(void)
{
}
